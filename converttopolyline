import ezdxf

def nums_in_polyline(string, txt_height=8):
    """Returns list with coordinates.
    This function transforms phrase consisting of text ('txt' font) to block that consists of polylines.
    Arguments are including string with phrase, text height (is 10 mm by default).
    Function supports transformation of only numbers and mark '.'..
    Phrase example: '123.456.789'.

    """

    dictOfNums = {'0': [(1.662103778491669, -2e-16), (0.0, 1.662103778492108), (0.0, 8.332104655818961),
                        (1.662103778491669, 9.994208434311073), (3.335000438663896, 9.994208434311073),
                        (4.997104217155992, 8.332104655818961), (4.997104217155992, 1.662103778492108),
                        (3.335000438663896, -2e-16), (1.662103778491669, -2e-16)],
                  '1': [(0.0, 7.052155560455052), (2.942052873856935, 9.994208434311073), (2.942052873856935, 0.0)],
                  '2': [(0.0, 8.332104655818961), (1.672896660170866, 9.994208434311073),
                        (4.997104217156004, 9.994208434311073), (6.670000877326851, 8.332104655818961),
                        (6.670000877326851, 6.659207995648102), (4.997104217156004, 4.997104217155079),
                        (1.672896660170866, 4.997104217155079), (0.0, 3.335000438662971), (0.0, 0.0),
                        (6.670000877326851, 0.0)],
                  '3': [(0.0, 8.332104655818961), (1.67289666017222, 9.994208434311073),
                        (5.007897098836117, 9.994208434311073), (6.670000877328, 8.332104655818961),
                        (6.670000877328, 6.659207995648102), (5.007897098836117, 4.997104217155079),
                        (6.670000877328, 3.33500043866297), (6.670000877328, 1.662103778492108),
                        (5.007897098836117, -2e-16),
                        (1.67289666017222, -2e-16), (0.0, 1.662103778492108)],
                  '4': [(6.659207995648081, 3.33500043866297), (-3.6e-15, 3.33500043866297),
                        (4.997104217155985, 9.994208434311073), (4.997104217155985, -6e-16)],
                  '5': [(0.0, 1.662103778492108), (1.662103778492095, -2e-16), (4.997104217155069, -2e-16),
                        (6.659207995647179, 1.662103778492108), (6.659207995647179, 4.997104217155079),
                        (4.997104217155069, 6.659207995648102), (0.0, 6.659207995648102), (0.0, 9.994208434311073),
                        (6.659207995647179, 9.994208434311073)],
                  '6': [(0.0, 4.997104217155079), (4.997104217155097, 4.997104217155079),
                        (6.670000877326856, 3.335000438662971), (6.670000877326856, 1.662103778492108),
                        (4.997104217155097, -2e-16), (1.662103778493026, -2e-16), (0.0, 1.662103778492108),
                        (0.0, 6.659207995648102), (3.33500043866389, 9.994208434311073),
                        (4.997104217155097, 9.994208434311073)],
                  '7': [(0.0, 9.994208434311073), (6.670000877326401, 9.994208434311073), (1.672896660170863, -2e-16)],
                  '8': [(1.662103778491655, 4.997104217155079), (0.0, 6.659207995648102), (0.0, 8.332104655818961),
                        (1.662103778491655, 9.994208434311073), (4.997104217155978, 9.994208434311073),
                        (6.659207995647618, 8.332104655818961), (6.659207995647618, 6.659207995648102),
                        (4.997104217155978, 4.997104217155079), (1.662103778491655, 4.997104217155079),
                        (0.0, 3.335000438662969), (0.0, 1.662103778492108), (1.662103778491655, -2e-16),
                        (4.997104217155978, -2e-16), (6.659207995647618, 1.662103778492108),
                        (6.659207995647618, 3.335000438662969), (4.997104217155978, 4.997104217155079)],
                  '9': [(1.662103778493005, 0.0), (3.335000438662959, 0.0), (6.659207995648102, 3.335000438662971),
                        (6.659207995648102, 8.332104655818961), (4.997104217155992, 9.994208434311073),
                        (1.662103778493005, 9.994208434311073), (0.0, 8.332104655818961), (0.0, 6.659207995648102),
                        (1.662103778493005, 4.997104217155079), (6.659207995648102, 4.997104217155079)],
                  '-' : [(0.0, 5.0), (6.6, 5.0)],
                  '.': [(0.0, 0.0), (0.0, 2.5)]
                  }

    height_in_dict = txt_height * 0.1
    width = 6.67
    interval = (width * 0.5) * height_in_dict
    position = 0  # начальная позиция первого значения
    final_coord = []  # список с координатами полилиний

    for index_value, value in enumerate(string, start=1):

        if value == '.':
                current_width = 0 # установка ширины для '.'
                print('сcurrent', current_width)
        elif value == '0':
                current_width = (width * 0.7491) * height_in_dict # установка ширины для '0'
        elif value == '1':
                current_width = (width * 0.441) * height_in_dict  # установка ширины для '1'
        else:
                current_width = width * height_in_dict # установка ширины для остальных значений


        value_coords = [tuple(
            [axis * height_in_dict + position if index_axis == 0 else axis * height_in_dict for index_axis, axis in
             enumerate(coordinate)]) for coordinate in (dictOfNums[
            value])]  # генерация координат текущего значения с учетом высоты текста (txt_height) и позиции текущего значения в исходной фразе
        final_coord.append(value_coords)  # добавление координат текущего значения в общий список

        print(position, value)
        position += interval + current_width
        print(current_width, position, value)

    return final_coord
    
    #_______________________________________________________________________________________________________________________________________________________
    
def border_of_line(list_of_coords):
    """Returns a list with the coordinates of the phrase border converted to polylines"""

    x1, y1 = min([i[0] for i in list_of_coords[0]]), 0
    x2, y2 = x1, max([i[1] for i in list_of_coords[0]])
    x3, y3 = max([i[0] for i in list_of_coords[-1]]), y2
    x4, y4 = x3, 0
    first_point = tuple([x1, y1])
    second_point = tuple([x2, y2])
    third_point = tuple([x3, y3])
    fourth_point = tuple([x4, y4])

    return [first_point, second_point, third_point, fourth_point, first_point]
